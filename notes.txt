int findMedian(int arr[], int n) 
{ 
    sort(arr, arr + n); // Sort the array 
    return arr[n / 2]; // Return middle element 
}
int kthSmallest(int arr[], int l, int r, int k) 
{ 
    if (k > 0 && k <= r - l + 1) { 
        int n = r - l + 1; // Number of elements in arr[l..r] 
        int i, median[(n + 4) / 5];
        for (i = 0; i < n / 5; i++) 
            median[i] = findMedian(arr + l + i * 5, 5); 
        if (i * 5 < n) { 
            median[i] = findMedian(arr + l + i * 5, n % 5); 
            i++; 
        } 
        int medOfMed = (i == 1) ? median[i - 1] 
                                : kthSmallest(median, 0, 
                                              i - 1, i / 2); 
        int pos = partition(arr, l, r, medOfMed); 
  
        if (pos - l == k - 1) 
            return arr[pos]; 
        if (pos - l > k - 1) // If position is more, recur for left 
            return kthSmallest(arr, l, pos - 1, k); 
  
        return kthSmallest(arr, pos + 1, r, k - pos + l - 1); 
    } 
    return INT_MAX; 
} 